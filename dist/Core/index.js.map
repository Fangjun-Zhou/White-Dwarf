{
  "version": 3,
  "sources": ["../../src/Core/index.ts", "../../src/Core/ComponentRegistry.ts", "../../src/Core/Context/RenderContext.ts", "../../src/Core/CoreSetup.ts"],
  "sourcesContent": ["import { World } from \"ecsy-wd\";\r\nimport { ITimeContext } from \"./Context/TimeContext\";\r\nimport { coreSetup, systemContext } from \"./CoreSetup\";\r\n\r\n// Main world to hold all game entities.\r\nexport let mainWorld = new World();\r\n// Physics world to hold all physics entities.\r\nexport let physicsWorld = new World();\r\n\r\n// Time context.\r\nexport const timeContext: ITimeContext = {\r\n  startTime: 0,\r\n  currentTime: 0,\r\n  deltaTime: 0,\r\n  timeScale: 1,\r\n  fixedTimeStep: 1 / 120,\r\n};\r\n\r\n// Frame update.\r\nconst mainUpdate = () => {\r\n  // Update time context.\r\n  let currentTime = Date.now() / 1000;\r\n  timeContext.deltaTime =\r\n    (currentTime - timeContext.currentTime) * timeContext.timeScale;\r\n  timeContext.currentTime = currentTime;\r\n\r\n  mainWorld.execute(timeContext.deltaTime);\r\n  requestAnimationFrame(mainUpdate);\r\n};\r\n\r\n// Physics update.\r\nconst physicsUpdate = async () => {\r\n  while (true) {\r\n    physicsWorld.execute(timeContext.fixedTimeStep);\r\n\r\n    // Wait for fixed time step.\r\n    await new Promise((resolve) =>\r\n      setTimeout(resolve, timeContext.fixedTimeStep * 1000)\r\n    );\r\n  }\r\n};\r\n\r\nexport const releaseInit = async () => {\r\n  // Setup core.\r\n  coreSetup();\r\n\r\n  await systemContext.coreStart({});\r\n\r\n  // Start white dwarf.\r\n  mainInit();\r\n};\r\n\r\nexport const mainInit = () => {\r\n  // Initialize time context.\r\n  timeContext.startTime = Date.now() / 1000;\r\n  timeContext.currentTime = timeContext.startTime;\r\n  timeContext.deltaTime = 0;\r\n\r\n  // Request animation frame.\r\n  requestAnimationFrame(mainUpdate);\r\n\r\n  // Start async physics update.\r\n  physicsUpdate();\r\n};\r\n\r\nexport const resetWorld = () => {\r\n  mainWorld = new World();\r\n  physicsWorld = new World();\r\n};\r\n", "import { Component, ComponentConstructor } from \"ecsy-wd\";\r\n\r\nexport interface IComponent extends Component<IComponent> {}\r\n\r\n// Registry of all components\r\nexport namespace IComponent {\r\n  const implementations: ComponentConstructor<IComponent>[] = [];\r\n\r\n  export function getImplementations(): ComponentConstructor<IComponent>[] {\r\n    return implementations;\r\n  }\r\n\r\n  export function register<T extends ComponentConstructor<IComponent>>(\r\n    ctor: T\r\n  ) {\r\n    implementations.push(ctor);\r\n    return ctor;\r\n  }\r\n}\r\n", "import { Entity } from \"ecsy-wd\";\r\n\r\nexport interface IEditorRenderContext {\r\n  mainCanvas: HTMLCanvasElement | null;\r\n  mainCamera: Entity | null;\r\n}\r\n\r\nexport const coreRenderContext: IEditorRenderContext = {\r\n  mainCanvas: null,\r\n  mainCamera: null,\r\n};\r\n", "import { mainWorld } from \".\";\r\n\r\nimport { IComponent } from \"./ComponentRegistry\";\r\nimport { coreRenderContext } from \"./Context/RenderContext\";\r\nimport { ISystemContext } from \"./Context/SystemContext\";\r\n\r\nexport const coreSetup = () => {\r\n  if (!coreRenderContext.mainCanvas) {\r\n    throw new Error(\"Main canvas is not ready.\");\r\n  }\r\n\r\n  // Register all components.\r\n  let componentConstructors = IComponent.getImplementations();\r\n  for (let i = 0; i < componentConstructors.length; i++) {\r\n    mainWorld.registerComponent(componentConstructors[i]);\r\n  }\r\n\r\n  // Call core setup callback.\r\n  systemContext.coreSetup();\r\n};\r\n\r\nexport const systemContext: ISystemContext = {\r\n  coreSetup: () => {},\r\n  coreStart: async () => {},\r\n  editorStart: () => {},\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAsB;;;ACKf,IAAU;AAAA,CAAV,CAAUA,gBAAV;AACL,QAAM,kBAAsD,CAAC;AAEtD,WAAS,qBAAyD;AACvE,WAAO;AAAA,EACT;AAFO,EAAAA,YAAS;AAIT,WAAS,SACd,MACA;AACA,oBAAgB,KAAK,IAAI;AACzB,WAAO;AAAA,EACT;AALO,EAAAA,YAAS;AAAA,GAPD;;;ACEV,IAAM,oBAA0C;AAAA,EACrD,YAAY;AAAA,EACZ,YAAY;AACd;;;ACJO,IAAM,YAAY,MAAM;AAC7B,MAAI,CAAC,kBAAkB,YAAY;AACjC,UAAM,IAAI,MAAM,2BAA2B;AAAA,EAC7C;AAGA,MAAI,wBAAwB,WAAW,mBAAmB;AAC1D,WAAS,IAAI,GAAG,IAAI,sBAAsB,QAAQ,KAAK;AACrD,cAAU,kBAAkB,sBAAsB,EAAE;AAAA,EACtD;AAGA,gBAAc,UAAU;AAC1B;AAEO,IAAM,gBAAgC;AAAA,EAC3C,WAAW,MAAM;AAAA,EAAC;AAAA,EAClB,WAAW,MAAY;AAAA,EAAC;AAAA,EACxB,aAAa,MAAM;AAAA,EAAC;AACtB;;;AHpBO,IAAI,YAAY,IAAI,qBAAM;AAE1B,IAAI,eAAe,IAAI,qBAAM;AAG7B,IAAM,cAA4B;AAAA,EACvC,WAAW;AAAA,EACX,aAAa;AAAA,EACb,WAAW;AAAA,EACX,WAAW;AAAA,EACX,eAAe,IAAI;AACrB;AAGA,IAAM,aAAa,MAAM;AAEvB,MAAI,cAAc,KAAK,IAAI,IAAI;AAC/B,cAAY,aACT,cAAc,YAAY,eAAe,YAAY;AACxD,cAAY,cAAc;AAE1B,YAAU,QAAQ,YAAY,SAAS;AACvC,wBAAsB,UAAU;AAClC;AAGA,IAAM,gBAAgB,MAAY;AAChC,SAAO,MAAM;AACX,iBAAa,QAAQ,YAAY,aAAa;AAG9C,UAAM,IAAI;AAAA,MAAQ,CAAC,YACjB,WAAW,SAAS,YAAY,gBAAgB,GAAI;AAAA,IACtD;AAAA,EACF;AACF;AAEO,IAAM,cAAc,MAAY;AAErC,YAAU;AAEV,QAAM,cAAc,UAAU,CAAC,CAAC;AAGhC,WAAS;AACX;AAEO,IAAM,WAAW,MAAM;AAE5B,cAAY,YAAY,KAAK,IAAI,IAAI;AACrC,cAAY,cAAc,YAAY;AACtC,cAAY,YAAY;AAGxB,wBAAsB,UAAU;AAGhC,gBAAc;AAChB;AAEO,IAAM,aAAa,MAAM;AAC9B,cAAY,IAAI,qBAAM;AACtB,iBAAe,IAAI,qBAAM;AAC3B;",
  "names": ["IComponent"]
}
