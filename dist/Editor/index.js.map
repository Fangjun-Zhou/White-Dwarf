{
  "version": 3,
  "sources": ["../../src/Editor/index.ts", "../../src/Core/index.ts", "../../src/Core/ComponentRegistry.ts", "../../src/Core/Context/RenderContext.ts", "../../src/Core/CoreSetup.ts", "../../src/Core/Serialization/EntitySerializer.ts", "../../src/Editor/TagComponent/EditorSelectedTag.ts", "../../src/Editor/TagComponent/EditorSceneCamTag.ts", "../../src/Core/Serialization/WorldSerializer.ts", "../../src/Editor/EditorContext.ts", "../../src/Editor/EditorEntityListManager.ts", "../../src/Editor/System/EditorInspectorSystem.ts", "../../src/Core/Locomotion/DataComponent/TransformData2D.ts", "../../src/Mathematics/Vector2.ts", "../../src/Core/Locomotion/DataComponent/TransformData3D.ts", "../../src/Mathematics/Quaternion.ts", "../../src/Mathematics/Vector3.ts", "../../src/Editor/System/EditorViewPort2DSystems.ts", "../../src/Core/Render/System/Canvas2DRenderer.ts", "../../src/Core/Render/DataComponent/CameraData2D.ts", "../../src/Core/Render/TagComponent/MainCameraTag.ts", "../../src/Editor/System/EditorViewPort3DSystem.ts", "../../src/Core/Render/System/Canvas3DRenderer.ts", "../../src/Core/Render/DataComponent/OrthographicCameraData3D.ts", "../../src/Core/Render/DataComponent/PerspectiveCameraData3D.ts"],
  "sourcesContent": ["import fileDownload from \"js-file-download\";\r\nimport { mainInit, mainWorld, resetWorld } from \"../Core\";\r\nimport { coreRenderContext } from \"../Core/Context/RenderContext\";\r\nimport { coreSetup, systemContext } from \"../Core/CoreSetup\";\r\nimport {\r\n  EntitySerializer,\r\n  IEntityObject,\r\n} from \"../Core/Serialization/EntitySerializer\";\r\nimport {\r\n  IWorldObject,\r\n  WorldSerializer,\r\n} from \"../Core/Serialization/WorldSerializer\";\r\nimport {\r\n  editorUIContext,\r\n  editorEventContext,\r\n  EditorControl,\r\n  editorControlContext,\r\n} from \"./EditorContext\";\r\nimport { updateEntityList, addNewEntity } from \"./EditorEntityListManager\";\r\nimport { updateEntityInspector } from \"./System/EditorInspectorSystem\";\r\nimport { EditorViewPort2DSystem } from \"./System/EditorViewPort2DSystems\";\r\n\r\nlet platState = false;\r\nlet worldData: IWorldObject | null = null;\r\n\r\nexport const editorInit = () => {\r\n  console.log(\"Editor Started\");\r\n\r\n  // Editor initialization.\r\n\r\n  coreRenderContext.mainCanvas = document.getElementById(\r\n    \"mainCanvas\"\r\n  ) as HTMLCanvasElement;\r\n  editorUIContext.entityLists = document.getElementsByClassName(\r\n    \"entityList\"\r\n  ) as HTMLCollectionOf<HTMLDivElement>;\r\n  editorUIContext.entityInspector = document.getElementsByClassName(\r\n    \"entityInspector\"\r\n  ) as HTMLCollectionOf<HTMLDivElement>;\r\n  editorUIContext.playButton = document.getElementById(\r\n    \"playButton\"\r\n  ) as HTMLButtonElement;\r\n\r\n  editorUIContext.entityNameInput = document.getElementById(\r\n    \"entityName\"\r\n  ) as HTMLInputElement;\r\n  editorUIContext.createEntityButton = document.getElementById(\r\n    \"createEntityButton\"\r\n  ) as HTMLButtonElement;\r\n  editorUIContext.deserializeEntityButton = document.getElementById(\r\n    \"fileInput\"\r\n  ) as HTMLInputElement;\r\n\r\n  editorUIContext.saveWorldButton = document.getElementById(\r\n    \"saveWorldButton\"\r\n  ) as HTMLButtonElement;\r\n  editorUIContext.loadWorldButton = document.getElementById(\r\n    \"loadWorldButton\"\r\n  ) as HTMLButtonElement;\r\n\r\n  editorUIContext.editorModeDropdown = document.getElementById(\r\n    \"editorMode\"\r\n  ) as HTMLSelectElement;\r\n\r\n  // Disable right click for main canvas.\r\n  coreRenderContext.mainCanvas.oncontextmenu = () => false;\r\n\r\n  // Register main world entity change.\r\n  mainWorld.onEntityChanged.push(updateEntityList);\r\n  // Register entity selected event.\r\n  editorEventContext.onEntitySelected.push(updateEntityInspector);\r\n\r\n  // Core setup.\r\n  coreSetup();\r\n\r\n  // Editor start.\r\n  systemContext.editorStart();\r\n\r\n  // Setup play button.\r\n  setupPlayButton();\r\n\r\n  // Setup create entity button.\r\n  setupCreateEntityButton();\r\n\r\n  // Setup deserialize entity input.\r\n  setupDeserializeEntityInput();\r\n\r\n  // Setup save and load world button.\r\n  setupSaveLoadWorldButton();\r\n\r\n  // Setup editor mode dropdown.\r\n  setupEditorModeDropdown();\r\n\r\n  // White Dwarf Engine initialization.\r\n  mainInit();\r\n\r\n  // Resize .\r\n  onResize();\r\n};\r\nconst onResize = () => {\r\n  // Resize mainCanvas.\r\n  if (coreRenderContext.mainCanvas) {\r\n    coreRenderContext.mainCanvas.width =\r\n      coreRenderContext.mainCanvas.clientWidth;\r\n    coreRenderContext.mainCanvas.height =\r\n      coreRenderContext.mainCanvas.clientHeight;\r\n  }\r\n};\r\n\r\nconst setupPlayButton = () => {\r\n  editorUIContext.playButton?.addEventListener(\"click\", async () => {\r\n    if (!platState) {\r\n      if (editorUIContext.playButton) {\r\n        editorUIContext.playButton.innerHTML = \"Stop\";\r\n      }\r\n\r\n      await editorPlay();\r\n\r\n      platState = true;\r\n    } else {\r\n      if (editorUIContext.playButton) {\r\n        editorUIContext.playButton.innerHTML = \"Play\";\r\n      }\r\n\r\n      editorStop();\r\n\r\n      platState = false;\r\n    }\r\n  });\r\n};\r\n\r\nconst setupCreateEntityButton = () => {\r\n  editorUIContext.createEntityButton?.addEventListener(\"click\", () => {\r\n    // Check if there's a target deserialize entity input.\r\n    if (editorUIContext.entityNameInput) {\r\n      addNewEntity(editorUIContext.entityNameInput.value);\r\n      editorUIContext.entityNameInput.value = \"\";\r\n    } else {\r\n      addNewEntity();\r\n    }\r\n  });\r\n};\r\n\r\nconst setupDeserializeEntityInput = () => {\r\n  editorUIContext.deserializeEntityButton?.addEventListener(\"click\", () => {\r\n    let input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.onchange = (e) => {\r\n      // Read the entity data.\r\n      const file = (e.target as HTMLInputElement).files?.[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          const data = e.target?.result;\r\n          if (data) {\r\n            const entityData = JSON.parse(data as string) as IEntityObject;\r\n            EntitySerializer.deserializeEntity(mainWorld, entityData);\r\n          }\r\n        };\r\n        reader.readAsText(file);\r\n      }\r\n    };\r\n    input.click();\r\n  });\r\n};\r\n\r\nconst setupSaveLoadWorldButton = () => {\r\n  editorUIContext.saveWorldButton?.addEventListener(\"click\", () => {\r\n    const worldObject = WorldSerializer.serializeWorld(mainWorld);\r\n    fileDownload(JSON.stringify(worldObject, null, 2), \"world.json\");\r\n  });\r\n\r\n  editorUIContext.loadWorldButton?.addEventListener(\"click\", () => {\r\n    let input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.onchange = (e) => {\r\n      // Read the entity data.\r\n      const file = (e.target as HTMLInputElement).files?.[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          const data = e.target?.result;\r\n          if (data) {\r\n            worldData = JSON.parse(data as string) as IWorldObject;\r\n\r\n            // Clear the world.\r\n            editorStop();\r\n          }\r\n        };\r\n        reader.readAsText(file);\r\n      }\r\n    };\r\n    input.click();\r\n  });\r\n};\r\n\r\nfunction setupEditorModeDropdown() {\r\n  // Add listener to editor mode dropdown.\r\n  editorUIContext.editorModeDropdown?.addEventListener(\"change\", (e) => {\r\n    const value = (e.target as HTMLSelectElement).value;\r\n    switch (value) {\r\n      case \"view\":\r\n        editorControlContext.controlMode = EditorControl.View;\r\n        break;\r\n\r\n      case \"move\":\r\n        editorControlContext.controlMode = EditorControl.Move;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n}\r\n\r\nconst editorPlay = async () => {\r\n  // Serialize the world.\r\n  worldData = WorldSerializer.serializeWorld(mainWorld);\r\n\r\n  // Reset the main world.\r\n  resetWorld();\r\n\r\n  // Register main world entity change.\r\n  mainWorld.onEntityChanged.push(updateEntityList);\r\n\r\n  // Call release init.\r\n  // Setup core.\r\n  coreSetup();\r\n\r\n  await systemContext.coreStart({\r\n    worldObject: worldData,\r\n  });\r\n\r\n  // Start white dwarf.\r\n  // mainInit();\r\n};\r\n\r\nconst editorStop = () => {\r\n  // Reset the main world.\r\n  resetWorld();\r\n\r\n  // Register main world entity change.\r\n  mainWorld.onEntityChanged.push(updateEntityList);\r\n\r\n  // Call editor init.// Core setup.\r\n  coreSetup();\r\n\r\n  // Editor start.\r\n  systemContext.editorStart();\r\n\r\n  // If there's world data, deserialize it.\r\n  if (worldData) {\r\n    WorldSerializer.deserializeWorld(mainWorld, worldData);\r\n  }\r\n\r\n  // White Dwarf Engine initialization.\r\n  // mainInit();\r\n};\r\n\r\nwindow.onload = editorInit;\r\nwindow.onresize = onResize;\r\n", "import { World } from \"ecsy-wd\";\r\nimport { ITimeContext } from \"./Context/TimeContext\";\r\nimport { coreSetup, systemContext } from \"./CoreSetup\";\r\n\r\n// Main world to hold all game entities.\r\nexport let mainWorld = new World();\r\n// Physics world to hold all physics entities.\r\nexport let physicsWorld = new World();\r\n\r\n// Time context.\r\nexport const timeContext: ITimeContext = {\r\n  startTime: 0,\r\n  currentTime: 0,\r\n  deltaTime: 0,\r\n  timeScale: 1,\r\n  fixedTimeStep: 1 / 120,\r\n};\r\n\r\n// Frame update.\r\nconst mainUpdate = () => {\r\n  // Update time context.\r\n  let currentTime = Date.now() / 1000;\r\n  timeContext.deltaTime =\r\n    (currentTime - timeContext.currentTime) * timeContext.timeScale;\r\n  timeContext.currentTime = currentTime;\r\n\r\n  mainWorld.execute(timeContext.deltaTime);\r\n  requestAnimationFrame(mainUpdate);\r\n};\r\n\r\n// Physics update.\r\nconst physicsUpdate = async () => {\r\n  while (true) {\r\n    physicsWorld.execute(timeContext.fixedTimeStep);\r\n\r\n    // Wait for fixed time step.\r\n    await new Promise((resolve) =>\r\n      setTimeout(resolve, timeContext.fixedTimeStep * 1000)\r\n    );\r\n  }\r\n};\r\n\r\nexport const releaseInit = async () => {\r\n  // Setup core.\r\n  coreSetup();\r\n\r\n  await systemContext.coreStart({});\r\n\r\n  // Start white dwarf.\r\n  mainInit();\r\n};\r\n\r\nexport const mainInit = () => {\r\n  // Initialize time context.\r\n  timeContext.startTime = Date.now() / 1000;\r\n  timeContext.currentTime = timeContext.startTime;\r\n  timeContext.deltaTime = 0;\r\n\r\n  // Request animation frame.\r\n  requestAnimationFrame(mainUpdate);\r\n\r\n  // Start async physics update.\r\n  physicsUpdate();\r\n};\r\n\r\nexport const resetWorld = () => {\r\n  mainWorld = new World();\r\n  physicsWorld = new World();\r\n};\r\n", "import { Component, ComponentConstructor } from \"ecsy-wd\";\r\n\r\nexport interface IComponent extends Component<IComponent> {}\r\n\r\n// Registry of all components\r\nexport namespace IComponent {\r\n  const implementations: ComponentConstructor<IComponent>[] = [];\r\n\r\n  export function getImplementations(): ComponentConstructor<IComponent>[] {\r\n    return implementations;\r\n  }\r\n\r\n  export function register<T extends ComponentConstructor<IComponent>>(\r\n    ctor: T\r\n  ) {\r\n    implementations.push(ctor);\r\n    return ctor;\r\n  }\r\n}\r\n", "import { Entity } from \"ecsy-wd\";\r\n\r\nexport interface IEditorRenderContext {\r\n  mainCanvas: HTMLCanvasElement | null;\r\n  mainCamera: Entity | null;\r\n}\r\n\r\nexport const coreRenderContext: IEditorRenderContext = {\r\n  mainCanvas: null,\r\n  mainCamera: null,\r\n};\r\n", "import { mainWorld } from \".\";\r\n\r\nimport { IComponent } from \"./ComponentRegistry\";\r\nimport { coreRenderContext } from \"./Context/RenderContext\";\r\nimport { ISystemContext } from \"./Context/SystemContext\";\r\n\r\nexport const coreSetup = () => {\r\n  if (!coreRenderContext.mainCanvas) {\r\n    throw new Error(\"Main canvas is not ready.\");\r\n  }\r\n\r\n  // Register all components.\r\n  let componentConstructors = IComponent.getImplementations();\r\n  for (let i = 0; i < componentConstructors.length; i++) {\r\n    mainWorld.registerComponent(componentConstructors[i]);\r\n  }\r\n\r\n  // Call core setup callback.\r\n  systemContext.coreSetup();\r\n};\r\n\r\nexport const systemContext: ISystemContext = {\r\n  coreSetup: () => {},\r\n  coreStart: async () => {},\r\n  editorStart: () => {},\r\n};\r\n", "import { Component, ComponentSchema } from \"ecsy-wd\";\r\nimport { Entity } from \"ecsy-wd\";\r\nimport { Types } from \"ecsy-wd\";\r\nimport { World } from \"ecsy-wd\";\r\nimport { EditorSelectedTag } from \"../../Editor/TagComponent/EditorSelectedTag\";\r\nimport { IComponent } from \"../ComponentRegistry\";\r\n\r\nexport interface IEntityObject {\r\n  name: string;\r\n  id: number;\r\n  components: { [key: string]: any };\r\n}\r\n\r\nexport interface IComponentObject {\r\n  type: string;\r\n  data: any;\r\n}\r\n\r\n/**\r\n * This is a helper class for serializing and deserializing entities.\r\n */\r\nexport class EntitySerializer {\r\n  // The current deserialized entity data.\r\n  public entityData: IEntityObject | null = null;\r\n\r\n  /**\r\n   * Serialize an entity to a JSON object.\r\n   *\r\n   * @param component The component to serialize.\r\n   * @returns json object representation of the component.\r\n   */\r\n  public static serializeComponent(\r\n    component: Component<any>\r\n  ): IComponentObject {\r\n    const componentObject: IComponentObject = {\r\n      type: component.constructor.name,\r\n      data: {},\r\n    };\r\n\r\n    const componentSchema = Object.getPrototypeOf(component).constructor\r\n      .schema as ComponentSchema;\r\n\r\n    const componentDataContent: { [key: string]: any } = {};\r\n    Object.keys(component).forEach((key) => {\r\n      if (\r\n        Object.keys(componentSchema).includes(key) &&\r\n        componentSchema[key].type !== Types.Ref\r\n      ) {\r\n        componentDataContent[key] = component[key as keyof typeof component];\r\n      }\r\n    });\r\n\r\n    componentObject.data = componentDataContent;\r\n\r\n    return componentObject;\r\n  }\r\n\r\n  /**\r\n   * Serialize an entity to a JSON object.\r\n   *\r\n   * @param entity The entity to serialize.\r\n   * @returns json object representation of the entity.\r\n   */\r\n  public static serializeEntity(entity: Entity): IEntityObject {\r\n    const entityObject: IEntityObject = {\r\n      name: entity.name,\r\n      id: entity.id,\r\n      components: {},\r\n    };\r\n\r\n    // Get all components of entity.\r\n    const components = entity.getComponents();\r\n    const componentIndices = Object.keys(components);\r\n\r\n    // Add components data.\r\n    for (let j = 0; j < componentIndices.length; j++) {\r\n      const componentIndex = componentIndices[j];\r\n      const component = components[componentIndex];\r\n\r\n      // Skip EditorSelectedTag.\r\n      if (component.constructor.name === EditorSelectedTag.name) {\r\n        continue;\r\n      }\r\n\r\n      const componentObject = EntitySerializer.serializeComponent(component);\r\n\r\n      entityObject.components[componentObject.type] = componentObject.data;\r\n    }\r\n\r\n    return entityObject;\r\n  }\r\n  /**\r\n   * Add new entity to world from entity data.\r\n   *\r\n   * @param entityData The entity data to add.\r\n   * @param reserveId Whether to reserve the id of the entity, defaults to false.\r\n   */\r\n  public static deserializeEntity(\r\n    world: World,\r\n    entityData: IEntityObject,\r\n    reserveId: boolean = false\r\n  ): Entity | null {\r\n    // Check if entity already exists.\r\n    const entity = world.getEntityById(entityData.id);\r\n    if (reserveId && entity && entity.alive) {\r\n      console.warn(\r\n        `Entity with id ${entityData.id} already exists. Skipping deserialization.`\r\n      );\r\n      return null;\r\n    }\r\n\r\n    // Create new entity.\r\n    let newEntity;\r\n    if (reserveId) {\r\n      newEntity = world.createEntity(entityData.name, entityData.id);\r\n    } else {\r\n      newEntity = world.createEntity(entityData.name);\r\n    }\r\n\r\n    // Add components.\r\n    for (const componentName in entityData.components) {\r\n      const componentData = entityData.components[componentName];\r\n      // Add component.\r\n      const componentList = IComponent.getImplementations();\r\n      // Get the component with the name.\r\n      let component = componentList.find(\r\n        (component) => component.name === componentName\r\n      );\r\n      if (component) {\r\n        // Add component to entity.\r\n        newEntity.addComponent(component, componentData);\r\n      } else {\r\n        console.error(\"Component not found.\");\r\n      }\r\n    }\r\n\r\n    return entity;\r\n  }\r\n}\r\n", "import { TagComponent } from \"ecsy-wd\";\r\nimport { IComponent } from \"../../Core/ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class EditorSelectedTag extends TagComponent {}\r\n", "import { TagComponent } from \"ecsy-wd\";\r\nimport { IComponent } from \"../../Core/ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class EditorSceneCamTag extends TagComponent {}\r\n", "import { World } from \"ecsy-wd\";\r\nimport { EditorSceneCamTag } from \"../../Editor/TagComponent/EditorSceneCamTag\";\r\nimport { EntitySerializer, IEntityObject } from \"./EntitySerializer\";\r\n\r\n// TODO: Add system serialization here.\r\nexport interface IWorldObject {\r\n  entities: IEntityObject[];\r\n}\r\n\r\n/**\r\n * This is a helper class for serializing and deserializing worlds.\r\n */\r\nexport class WorldSerializer {\r\n  /**\r\n   * Serialize a world to a JSON object.\r\n   *\r\n   * @param world The world to serialize.\r\n   * @returns IWorldObject containing all the serialized entities.\r\n   */\r\n  public static serializeWorld(world: World): IWorldObject {\r\n    const worldObject: IWorldObject = {\r\n      entities: [],\r\n    };\r\n\r\n    world.getAllEntities().forEach((entity) => {\r\n      // Filter out editor camera.\r\n      if (entity.hasComponent(EditorSceneCamTag)) {\r\n        return;\r\n      }\r\n\r\n      worldObject.entities.push(EntitySerializer.serializeEntity(entity));\r\n    });\r\n\r\n    return worldObject;\r\n  }\r\n\r\n  public static deserializeWorld(world: World, worldObject: IWorldObject) {\r\n    worldObject.entities.forEach((entityObject) => {\r\n      EntitySerializer.deserializeEntity(world, entityObject);\r\n    });\r\n  }\r\n}\r\n", "import { Entity } from \"ecsy-wd\";\r\n\r\nexport enum EditorControl {\r\n  View,\r\n  Move,\r\n}\r\n\r\nexport interface IEditorUIContext {\r\n  entityLists: HTMLCollectionOf<HTMLDivElement> | null;\r\n  entityInspector: HTMLCollectionOf<HTMLDivElement> | null;\r\n\r\n  playButton: HTMLButtonElement | null;\r\n\r\n  entityNameInput: HTMLInputElement | null;\r\n  createEntityButton: HTMLButtonElement | null;\r\n  deserializeEntityButton: HTMLInputElement | null;\r\n\r\n  saveWorldButton: HTMLButtonElement | null;\r\n  loadWorldButton: HTMLButtonElement | null;\r\n\r\n  editorModeDropdown: HTMLSelectElement | null;\r\n}\r\n\r\nexport interface IEditorEventContext {\r\n  onEntitySelected: Array<(entity: Entity) => void>;\r\n}\r\n\r\nexport interface IEditorControlContext {\r\n  controlMode: EditorControl;\r\n}\r\n\r\nexport const editorUIContext: IEditorUIContext = {\r\n  entityLists: null,\r\n  entityInspector: null,\r\n  playButton: null,\r\n  entityNameInput: null,\r\n  createEntityButton: null,\r\n  deserializeEntityButton: null,\r\n  saveWorldButton: null,\r\n  loadWorldButton: null,\r\n\r\n  editorModeDropdown: null,\r\n};\r\n\r\nexport const editorEventContext: IEditorEventContext = {\r\n  onEntitySelected: [],\r\n};\r\n\r\nexport const editorControlContext: IEditorControlContext = {\r\n  controlMode: EditorControl.Move,\r\n};\r\n", "import { Entity } from \"ecsy-wd\";\r\nimport { mainWorld } from \"../Core\";\r\nimport { editorEventContext, editorUIContext } from \"./EditorContext\";\r\n\r\nexport const updateEntityList = (entities: Array<Entity>) => {\r\n  if (!editorUIContext.entityLists) {\r\n    return;\r\n  }\r\n\r\n  // Traverse all entityLists.\r\n  for (let i = 0; i < editorUIContext.entityLists.length; i++) {\r\n    const entityList = editorUIContext.entityLists[i];\r\n    // Remove all children.\r\n    while (entityList.firstChild) {\r\n      entityList.removeChild(entityList.firstChild);\r\n    }\r\n    // Add new children.\r\n    for (let j = 0; j < entities.length; j++) {\r\n      const entity = entities[j];\r\n      const entityDiv = document.createElement(\"div\");\r\n\r\n      // Add entity name.\r\n      const entityName = document.createElement(\"span\");\r\n      entityName.innerText = entity.name === \"\" ? \"Entity\" : entity.name;\r\n      entityDiv.appendChild(entityName);\r\n\r\n      // Add entity id.\r\n      const entityId = document.createElement(\"span\");\r\n      entityId.innerText = entity.id.toString();\r\n      entityDiv.appendChild(entityId);\r\n\r\n      // Set hover style.\r\n      entityDiv.style.cursor = \"pointer\";\r\n\r\n      // Add entity select button.\r\n      entityDiv.className = \"entityListItem\";\r\n      entityList.appendChild(entityDiv);\r\n\r\n      // Add select behavior.\r\n      entityDiv.onclick = () => {\r\n        // Invoke all onEntitySelected callbacks.\r\n        editorEventContext.onEntitySelected.forEach((callback) => {\r\n          callback(entity);\r\n        });\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport const addNewEntity = (entityName?: string) => {\r\n  // Add new entity to entity list.\r\n  mainWorld.createEntity(entityName);\r\n};\r\n", "import { COMPONENT_CHANGE_EVENT } from \"ecsy-wd\";\r\nimport { Entity } from \"ecsy-wd\";\r\nimport fileDownload from \"js-file-download\";\r\nimport { IComponent } from \"../../Core/ComponentRegistry\";\r\nimport { TransformData2D } from \"../../Core/Locomotion/DataComponent/TransformData2D\";\r\nimport { TransformData3D } from \"../../Core/Locomotion/DataComponent/TransformData3D\";\r\nimport { EntitySerializer } from \"../../Core/Serialization/EntitySerializer\";\r\nimport { editorUIContext } from \"../EditorContext\";\r\nimport { EditorSelectedTag } from \"../TagComponent/EditorSelectedTag\";\r\nimport { EditorViewPort2DSystem } from \"./EditorViewPort2DSystems\";\r\nimport { EditorViewPort3DSystem } from \"./EditorViewPort3DSystem\";\r\n\r\nexport const updateEntityInspector = (entity: Entity | null) => {\r\n  // Check if the inspectEntity has Transform component.\r\n  if (entity?.hasComponent(TransformData2D)) {\r\n    // Removed the EditorSelectedTag from the previous entity.\r\n    if (EditorViewPort2DSystem.inspectEntity) {\r\n      EditorViewPort2DSystem.inspectEntity.removeComponent(EditorSelectedTag);\r\n    }\r\n\r\n    EditorViewPort2DSystem.inspectEntity = entity;\r\n\r\n    // Add the EditorSelectedTag to the new entity.\r\n    if (EditorViewPort2DSystem.inspectEntity) {\r\n      EditorViewPort2DSystem.inspectEntity.addComponent(EditorSelectedTag);\r\n    }\r\n\r\n    EditorViewPort2DSystem.inspectTransform = entity.getComponent(\r\n      TransformData2D\r\n    ) as Readonly<TransformData2D>;\r\n  } else if (entity?.hasComponent(TransformData3D)) {\r\n    // Removed the EditorSelectedTag from the previous entity.\r\n    if (EditorViewPort3DSystem.inspectEntity) {\r\n      EditorViewPort3DSystem.inspectEntity.removeComponent(EditorSelectedTag);\r\n    }\r\n\r\n    EditorViewPort3DSystem.inspectEntity = entity;\r\n\r\n    // Add the EditorSelectedTag to the new entity.\r\n    if (EditorViewPort3DSystem.inspectEntity) {\r\n      EditorViewPort3DSystem.inspectEntity.addComponent(EditorSelectedTag);\r\n    }\r\n\r\n    EditorViewPort3DSystem.inspectTransform = entity.getMutableComponent(\r\n      TransformData3D\r\n    ) as TransformData3D;\r\n  } else {\r\n    EditorViewPort2DSystem.inspectTransform = null;\r\n    EditorViewPort3DSystem.inspectTransform = null;\r\n  }\r\n\r\n  displayEntityInspector(entity);\r\n};\r\n\r\nexport const displayEntityInspector = (entity: Entity | null) => {\r\n  if (!editorUIContext.entityInspector) {\r\n    return;\r\n  }\r\n\r\n  if (entity === null) {\r\n    // Traverse all entityInspectors.\r\n    for (let i = 0; i < editorUIContext.entityInspector.length; i++) {\r\n      const entityInspector = editorUIContext.entityInspector[i];\r\n      // Remove all children.\r\n      while (entityInspector.firstChild) {\r\n        entityInspector.removeChild(entityInspector.firstChild);\r\n      }\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  // Get all components of entity.\r\n  const components = entity.getComponents();\r\n  const componentIndices = Object.keys(components);\r\n\r\n  // Traverse all entityInspectors.\r\n  for (let i = 0; i < editorUIContext.entityInspector.length; i++) {\r\n    const entityInspector = editorUIContext.entityInspector[i];\r\n    // Remove all children.\r\n    while (entityInspector.firstChild) {\r\n      entityInspector.removeChild(entityInspector.firstChild);\r\n    }\r\n\r\n    // Entity operations\r\n    const entityOperationDiv = document.createElement(\"div\");\r\n    entityOperationDiv.className = \"componentListItem\";\r\n\r\n    // Add remove entity button.\r\n    addRemoveEntityButton(entity, entityOperationDiv);\r\n    // Add serialize entity button.\r\n    addSerializeEntityButton(entity, entityOperationDiv);\r\n\r\n    entityInspector.appendChild(entityOperationDiv);\r\n\r\n    // Add components data.\r\n    for (let j = 0; j < componentIndices.length; j++) {\r\n      const componentIndex = componentIndices[j];\r\n      const component = components[componentIndex];\r\n\r\n      const componentObject = EntitySerializer.serializeComponent(component);\r\n\r\n      // Add component name.\r\n      const componentDiv = document.createElement(\"div\");\r\n      // Set css class.\r\n      componentDiv.className = \"componentListItem\";\r\n\r\n      const componentTitle = document.createElement(\"h3\");\r\n      componentTitle.innerText = componentObject.type;\r\n      componentDiv.appendChild(componentTitle);\r\n\r\n      // Custom inspector here.\r\n      if (component.onInspector) {\r\n        component.onInspector(componentDiv);\r\n      }\r\n\r\n      // Add a spacer.\r\n      const spacer = document.createElement(\"div\");\r\n      spacer.style.height = \"10px\";\r\n      componentDiv.appendChild(spacer);\r\n\r\n      // Default inspector here.\r\n      if (!component.onInspector || component.useDefaultInspector) {\r\n        const componentData = document.createElement(\"span\");\r\n        componentData.className = \"textarea\";\r\n        componentData.contentEditable = \"true\";\r\n        componentData.textContent = JSON.stringify(\r\n          componentObject.data,\r\n          null,\r\n          2\r\n        );\r\n        componentData.style.whiteSpace = \"pre-wrap\";\r\n        componentData.style.resize = \"none\";\r\n        componentDiv.appendChild(componentData);\r\n\r\n        // When component data is changed.\r\n        componentData.addEventListener(\"input\", (event) => {\r\n          const target = event.target as HTMLTextAreaElement;\r\n          try {\r\n            const newComponentData = JSON.parse(target.textContent || \"{}\");\r\n            component.copy(newComponentData);\r\n            // Call change event.\r\n            entity.getMutableComponent(\r\n              Object.getPrototypeOf(component).constructor\r\n            );\r\n          } catch (error) {\r\n            console.error(error);\r\n            return;\r\n          }\r\n        });\r\n\r\n        // When component data is changed.\r\n        component.eventEmitter.on(COMPONENT_CHANGE_EVENT, (component) => {\r\n          const componentObject =\r\n            EntitySerializer.serializeComponent(component);\r\n          // Check if the componentData box is focused.\r\n          if (document.activeElement !== componentData) {\r\n            componentData.textContent = JSON.stringify(\r\n              componentObject.data,\r\n              null,\r\n              2\r\n            );\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add a remove button.\r\n      const removeButton = document.createElement(\"button\");\r\n      removeButton.innerText = \"Remove\";\r\n      removeButton.onclick = () => {\r\n        // Remove component.\r\n        entity.removeComponent(Object.getPrototypeOf(component).constructor);\r\n        // Update entity inspector.\r\n        updateEntityInspector(entity);\r\n      };\r\n      componentDiv.appendChild(removeButton);\r\n\r\n      // Add component to entityInspector.\r\n      entityInspector.appendChild(componentDiv);\r\n    }\r\n\r\n    // Add component feature.\r\n    addComponentButton(entity, entityInspector);\r\n  }\r\n};\r\n\r\nfunction addSerializeEntityButton(\r\n  entity: Entity,\r\n  entityOperationDiv: HTMLDivElement\r\n) {\r\n  const serializeEntityButton = document.createElement(\"button\");\r\n  serializeEntityButton.innerText = \"Serialize Entity\";\r\n  serializeEntityButton.style.width = \"100%\";\r\n  serializeEntityButton.onclick = () => {\r\n    const serializedEntity = EntitySerializer.serializeEntity(entity);\r\n    fileDownload(JSON.stringify(serializedEntity, null, 2), \"entity.json\");\r\n  };\r\n  entityOperationDiv.appendChild(serializeEntityButton);\r\n}\r\n\r\n/**\r\n * Add a new component to entity.\r\n *\r\n * @param entity the entity to add component to.\r\n * @param entityInspector the entity inspector to add component button to.\r\n */\r\nfunction addComponentButton(entity: Entity, entityInspector: HTMLDivElement) {\r\n  const componentAddDiv = document.createElement(\"div\");\r\n  componentAddDiv.className = \"componentListItem\";\r\n\r\n  const componentNameInput = document.createElement(\"select\");\r\n  const componentList = IComponent.getImplementations();\r\n  const componentNames = componentList.map((component) => component.name);\r\n  for (let j = 0; j < componentNames.length; j++) {\r\n    const componentName = componentNames[j];\r\n    const option = document.createElement(\"option\");\r\n    option.value = componentName;\r\n    option.innerText = componentName;\r\n    componentNameInput.appendChild(option);\r\n  }\r\n  componentAddDiv.appendChild(componentNameInput);\r\n\r\n  // Add \"Add Component\" button.\r\n  const addComponentButton = document.createElement(\"button\");\r\n  addComponentButton.style.width = \"100%\";\r\n  addComponentButton.innerText = \"Add Component\";\r\n  addComponentButton.onclick = () => {\r\n    // Add component.\r\n    const componentList = IComponent.getImplementations();\r\n    // Get the component with the name.\r\n    let component = componentList.find(\r\n      (component) => component.name === componentNameInput.value\r\n    );\r\n    if (component) {\r\n      // Add component to entity.\r\n      entity.addComponent(component);\r\n      updateEntityInspector(entity);\r\n    } else {\r\n      console.error(\"Component not found.\");\r\n    }\r\n  };\r\n  componentAddDiv.appendChild(addComponentButton);\r\n\r\n  entityInspector.appendChild(componentAddDiv);\r\n}\r\n\r\n/**\r\n * Remove the entity.\r\n *\r\n * @param entity the entity to remove.\r\n * @param entityOperationDiv the entity operation div to add remove button to.\r\n */\r\nfunction addRemoveEntityButton(\r\n  entity: Entity,\r\n  entityOperationDiv: HTMLDivElement\r\n) {\r\n  const removeEntityButton = document.createElement(\"button\");\r\n  removeEntityButton.innerText = \"Remove Entity\";\r\n  removeEntityButton.style.width = \"100%\";\r\n  removeEntityButton.onclick = () => {\r\n    // Remove entity.\r\n    entity.remove();\r\n    // Update entity inspector.\r\n    updateEntityInspector(null);\r\n  };\r\n\r\n  entityOperationDiv.appendChild(removeEntityButton);\r\n}\r\n", "import { Component, ComponentSchema, COMPONENT_CHANGE_EVENT } from \"ecsy-wd\";\r\nimport { Types } from \"ecsy-wd\";\r\nimport {\r\n  Vector2,\r\n  Vector2CustomEditor,\r\n  Vector2Type,\r\n} from \"../../../Mathematics/Vector2\";\r\nimport { IComponent } from \"../../ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class TransformData2D extends Component<TransformData2D> {\r\n  static schema: ComponentSchema = {\r\n    position: {\r\n      type: Vector2Type,\r\n      default: new Vector2(0, 0),\r\n    },\r\n    rotation: {\r\n      type: Types.Number,\r\n      default: 0,\r\n    },\r\n    scale: {\r\n      type: Vector2Type,\r\n      default: new Vector2(1, 1),\r\n    },\r\n  };\r\n\r\n  position!: Vector2;\r\n  rotation!: number;\r\n  scale!: Vector2;\r\n\r\n  public useDefaultInspector: boolean = false;\r\n\r\n  public onInspector = (componentDiv: HTMLDivElement) => {\r\n    const transformDiv = document.createElement(\"div\");\r\n\r\n    // Position editor.\r\n    const positionDiv = document.createElement(\"div\");\r\n    // Position title.\r\n    positionDiv.appendChild(document.createTextNode(\"Position\"));\r\n    // Position Vector2 editor.\r\n    const [positionVector2Div, setPosition] = Vector2CustomEditor(\r\n      this.position,\r\n      (newValue) => {\r\n        this.position = newValue;\r\n        this.eventEmitter.emit(COMPONENT_CHANGE_EVENT, this);\r\n      }\r\n    );\r\n    positionDiv.appendChild(positionVector2Div);\r\n\r\n    // Rotation editor.\r\n    const rotationDiv = document.createElement(\"div\");\r\n    // Rotation title.\r\n    rotationDiv.appendChild(document.createTextNode(\"Rotation\"));\r\n    // Rotation input.\r\n    const rotationInput = document.createElement(\"input\");\r\n    rotationInput.type = \"number\";\r\n    rotationInput.style.minWidth = \"0px\";\r\n    rotationInput.style.width = \"100%\";\r\n    rotationInput.value = this.rotation.toString();\r\n    rotationInput.onchange = (event) => {\r\n      this.rotation = parseFloat((event.target as HTMLInputElement).value);\r\n      this.eventEmitter.emit(COMPONENT_CHANGE_EVENT, this);\r\n    };\r\n    rotationDiv.appendChild(rotationInput);\r\n\r\n    // Scale editor.\r\n    const scaleDiv = document.createElement(\"div\");\r\n    // Scale title.\r\n    scaleDiv.appendChild(document.createTextNode(\"Scale\"));\r\n    // Scale Vector2 editor.\r\n    const [scaleVector2Div, setScale] = Vector2CustomEditor(\r\n      this.scale,\r\n      (newValue) => {\r\n        this.scale = newValue;\r\n        this.eventEmitter.emit(COMPONENT_CHANGE_EVENT, this);\r\n      }\r\n    );\r\n    scaleDiv.appendChild(scaleVector2Div);\r\n\r\n    componentDiv.appendChild(positionDiv);\r\n    componentDiv.appendChild(rotationDiv);\r\n    componentDiv.appendChild(scaleDiv);\r\n\r\n    this.eventEmitter.on(COMPONENT_CHANGE_EVENT, (component) => {\r\n      setPosition(component.position);\r\n      // Modify the rotation input value if it's not focused.\r\n      if (document.activeElement !== rotationInput) {\r\n        rotationInput.value = component.rotation.toString();\r\n      }\r\n      setScale(component.scale);\r\n    });\r\n\r\n    componentDiv.appendChild(transformDiv);\r\n  };\r\n}\r\n", "import { cloneClonable, copyCopyable, createType } from \"ecsy-wd\";\r\nimport { vec2 } from \"gl-matrix\";\r\n\r\n/**\r\n * Wrapper for glmatrix vec2.\r\n *\r\n * @export\r\n * @class Vector2\r\n */\r\nexport class Vector2 {\r\n  value: vec2;\r\n\r\n  /**\r\n   * Creates an instance of Vector2.\r\n   * @param {number} x the x component of the vector.\r\n   * @param {number} y the y component of the vector.\r\n   * @memberof Vector2\r\n   */\r\n  constructor(x: number, y: number) {\r\n    this.value = vec2.fromValues(x, y);\r\n  }\r\n\r\n  set(x: number, y: number) {\r\n    vec2.set(this.value, x, y);\r\n  }\r\n\r\n  copy(v: Vector2): Vector2 {\r\n    this.value = vec2.copy(this.value, v.value);\r\n    return this;\r\n  }\r\n\r\n  clone(): Vector2 {\r\n    return new Vector2(this.value[0], this.value[1]);\r\n  }\r\n}\r\n\r\nexport const Vector2Type = createType({\r\n  name: \"Vector2\",\r\n  default: new Vector2(0, 0),\r\n  copy: copyCopyable<Vector2>,\r\n  clone: cloneClonable<Vector2>,\r\n});\r\n\r\nexport const Vector2CustomEditor = (\r\n  value: Vector2,\r\n  onChange: (value: Vector2) => void\r\n): [HTMLDivElement, (v: Vector2) => void] => {\r\n  const vector2Div = document.createElement(\"div\");\r\n  vector2Div.style.display = \"flex\";\r\n  vector2Div.style.flexDirection = \"row\";\r\n\r\n  const xLabel = document.createElement(\"label\");\r\n  xLabel.innerText = \"X\";\r\n  vector2Div.appendChild(xLabel);\r\n  const xInput = document.createElement(\"input\");\r\n  xInput.type = \"number\";\r\n  xInput.style.minWidth = \"0px\";\r\n  xInput.style.flexGrow = \"1\";\r\n  xInput.value = value.value[0].toString();\r\n  vector2Div.appendChild(xInput);\r\n\r\n  const yLabel = document.createElement(\"label\");\r\n  yLabel.innerText = \"Y\";\r\n  vector2Div.appendChild(yLabel);\r\n  const yInput = document.createElement(\"input\");\r\n  yInput.type = \"number\";\r\n  yInput.style.minWidth = \"0px\";\r\n  yInput.style.flexGrow = \"1\";\r\n  yInput.value = value.value[1].toString();\r\n  vector2Div.appendChild(yInput);\r\n\r\n  const update = () => {\r\n    onChange(new Vector2(parseFloat(xInput.value), parseFloat(yInput.value)));\r\n  };\r\n\r\n  const setVector2 = (v: Vector2) => {\r\n    // If the value is focused, don't update it.\r\n    if (\r\n      document.activeElement === xInput ||\r\n      document.activeElement === yInput\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    xInput.value = v.value[0].toString();\r\n    yInput.value = v.value[1].toString();\r\n  };\r\n\r\n  xInput.onchange = update;\r\n  yInput.onchange = update;\r\n\r\n  return [vector2Div, setVector2];\r\n};\r\n", "import { Component, ComponentSchema, COMPONENT_CHANGE_EVENT } from \"ecsy-wd\";\r\nimport {\r\n  Quaternion,\r\n  QuaternionCustomEditor,\r\n  QuaternionType,\r\n} from \"../../../Mathematics/Quaternion\";\r\nimport {\r\n  Vector3,\r\n  Vector3CustomEditor,\r\n  Vector3Type,\r\n} from \"../../../Mathematics/Vector3\";\r\nimport { IComponent } from \"../../ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class TransformData3D extends Component<TransformData3D> {\r\n  static schema: ComponentSchema = {\r\n    position: {\r\n      type: Vector3Type,\r\n      default: new Vector3(0, 0, 0),\r\n    },\r\n    rotation: {\r\n      type: QuaternionType,\r\n      default: new Quaternion(0, 0, 0, 1),\r\n    },\r\n    scale: {\r\n      type: Vector3Type,\r\n      default: new Vector3(1, 1, 1),\r\n    },\r\n  };\r\n\r\n  position!: Vector3;\r\n  rotation!: Quaternion;\r\n  scale!: Vector3;\r\n\r\n  public useDefaultInspector: boolean = false;\r\n  public onInspector: (componentDiv: HTMLDivElement) => void | null = (\r\n    componentDiv: HTMLDivElement\r\n  ) => {\r\n    const transformDiv = document.createElement(\"div\");\r\n\r\n    // Position editor.\r\n    const positionDiv = document.createElement(\"div\");\r\n    // Position title.\r\n    positionDiv.appendChild(document.createTextNode(\"Position\"));\r\n    // Position Vector3 editor.\r\n    const [positionVector3Div, setPosition] = Vector3CustomEditor(\r\n      this.position,\r\n      (newValue) => {\r\n        this.position = newValue;\r\n        this.eventEmitter.emit(COMPONENT_CHANGE_EVENT, this);\r\n      }\r\n    );\r\n    positionDiv.appendChild(positionVector3Div);\r\n\r\n    // Rotation editor.\r\n    const rotationDiv = document.createElement(\"div\");\r\n    // Rotation title.\r\n    rotationDiv.appendChild(document.createTextNode(\"Rotation\"));\r\n    // Rotation Quaternion editor.\r\n    const [rotationQuaternionDiv, setRotation] = QuaternionCustomEditor(\r\n      this.rotation,\r\n      (newValue) => {\r\n        this.rotation = newValue;\r\n        this.eventEmitter.emit(COMPONENT_CHANGE_EVENT, this);\r\n      }\r\n    );\r\n    rotationDiv.appendChild(rotationQuaternionDiv);\r\n\r\n    // Scale editor.\r\n    const scaleDiv = document.createElement(\"div\");\r\n    // Scale title.\r\n    scaleDiv.appendChild(document.createTextNode(\"Scale\"));\r\n    // Scale Vector3 editor.\r\n    const [scaleVector3Div, setScale] = Vector3CustomEditor(\r\n      this.scale,\r\n      (newValue) => {\r\n        this.scale = newValue;\r\n        this.eventEmitter.emit(COMPONENT_CHANGE_EVENT, this);\r\n      }\r\n    );\r\n    scaleDiv.appendChild(scaleVector3Div);\r\n\r\n    // Append all editors to the transform editor.\r\n    transformDiv.appendChild(positionDiv);\r\n    transformDiv.appendChild(rotationDiv);\r\n    transformDiv.appendChild(scaleDiv);\r\n\r\n    this.eventEmitter.on(COMPONENT_CHANGE_EVENT, () => {\r\n      setPosition(this.position);\r\n      setRotation(this.rotation);\r\n      setScale(this.scale);\r\n    });\r\n\r\n    // Append the transform editor to the component editor.\r\n    componentDiv.appendChild(transformDiv);\r\n  };\r\n}\r\n", "import { createType, copyCopyable, cloneClonable } from \"ecsy-wd\";\r\nimport { quat, vec4 } from \"gl-matrix\";\r\n\r\nexport class Quaternion {\r\n  value: quat;\r\n\r\n  constructor(x: number, y: number, z: number, w: number) {\r\n    this.value = quat.fromValues(x, y, z, w);\r\n  }\r\n\r\n  set(x: number, y: number, z: number, w: number) {\r\n    quat.set(this.value, x, y, z, w);\r\n  }\r\n\r\n  copy(q: Quaternion): Quaternion {\r\n    this.value = quat.copy(this.value, q.value);\r\n    return this;\r\n  }\r\n\r\n  clone(): Quaternion {\r\n    return new Quaternion(\r\n      this.value[0],\r\n      this.value[1],\r\n      this.value[2],\r\n      this.value[3]\r\n    );\r\n  }\r\n}\r\n\r\nexport const QuaternionType = createType({\r\n  name: \"Quaternion\",\r\n  default: new Quaternion(0, 0, 0, 1),\r\n  copy: copyCopyable<Quaternion>,\r\n  clone: cloneClonable<Quaternion>,\r\n});\r\n\r\nexport const QuaternionCustomEditor = (\r\n  value: Quaternion,\r\n  onChange: (value: Quaternion) => void\r\n): [HTMLDivElement, (v: Quaternion) => void] => {\r\n  const quaternionDiv = document.createElement(\"div\");\r\n  quaternionDiv.style.display = \"flex\";\r\n  quaternionDiv.style.flexDirection = \"row\";\r\n\r\n  const xLabel = document.createElement(\"label\");\r\n  xLabel.innerText = \"X\";\r\n  quaternionDiv.appendChild(xLabel);\r\n  const xInput = document.createElement(\"input\");\r\n  xInput.type = \"number\";\r\n  xInput.style.minWidth = \"0px\";\r\n  xInput.style.flexGrow = \"1\";\r\n  xInput.value = value.value[0].toString();\r\n  quaternionDiv.appendChild(xInput);\r\n\r\n  const yLabel = document.createElement(\"label\");\r\n  yLabel.innerText = \"Y\";\r\n  quaternionDiv.appendChild(yLabel);\r\n  const yInput = document.createElement(\"input\");\r\n  yInput.type = \"number\";\r\n  yInput.style.minWidth = \"0px\";\r\n  yInput.style.flexGrow = \"1\";\r\n  yInput.value = value.value[1].toString();\r\n  quaternionDiv.appendChild(yInput);\r\n\r\n  const zLabel = document.createElement(\"label\");\r\n  zLabel.innerText = \"Z\";\r\n  quaternionDiv.appendChild(zLabel);\r\n  const zInput = document.createElement(\"input\");\r\n  zInput.type = \"number\";\r\n  zInput.style.minWidth = \"0px\";\r\n  zInput.style.flexGrow = \"1\";\r\n  zInput.value = value.value[2].toString();\r\n  quaternionDiv.appendChild(zInput);\r\n\r\n  const wLabel = document.createElement(\"label\");\r\n  wLabel.innerText = \"W\";\r\n  quaternionDiv.appendChild(wLabel);\r\n  const wInput = document.createElement(\"input\");\r\n  wInput.type = \"number\";\r\n  wInput.style.minWidth = \"0px\";\r\n  wInput.style.flexGrow = \"1\";\r\n  wInput.value = value.value[3].toString();\r\n  quaternionDiv.appendChild(wInput);\r\n\r\n  const update = () => {\r\n    onChange(\r\n      new Quaternion(\r\n        parseFloat(xInput.value),\r\n        parseFloat(yInput.value),\r\n        parseFloat(zInput.value),\r\n        parseFloat(wInput.value)\r\n      )\r\n    );\r\n  };\r\n\r\n  const setQuaternion = (q: Quaternion) => {\r\n    if (\r\n      document.activeElement === xInput ||\r\n      document.activeElement === yInput ||\r\n      document.activeElement === zInput ||\r\n      document.activeElement === wInput\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    xInput.value = q.value[0].toString();\r\n    yInput.value = q.value[1].toString();\r\n    zInput.value = q.value[2].toString();\r\n    wInput.value = q.value[3].toString();\r\n  };\r\n\r\n  xInput.addEventListener(\"change\", update);\r\n  yInput.addEventListener(\"change\", update);\r\n  zInput.addEventListener(\"change\", update);\r\n  wInput.addEventListener(\"change\", update);\r\n\r\n  return [quaternionDiv, setQuaternion];\r\n};\r\n", "import { createType, copyCopyable, cloneClonable } from \"ecsy-wd\";\r\nimport { vec3 } from \"gl-matrix\";\r\n\r\nexport class Vector3 {\r\n  value: vec3;\r\n\r\n  constructor(x: number, y: number, z: number) {\r\n    this.value = vec3.fromValues(x, y, z);\r\n  }\r\n\r\n  set(x: number, y: number, z: number) {\r\n    vec3.set(this.value, x, y, z);\r\n  }\r\n\r\n  copy(v: Vector3): Vector3 {\r\n    this.value = vec3.copy(this.value, v.value);\r\n    return this;\r\n  }\r\n\r\n  clone(): Vector3 {\r\n    return new Vector3(this.value[0], this.value[1], this.value[2]);\r\n  }\r\n}\r\n\r\nexport const Vector3Type = createType({\r\n  name: \"Vector3\",\r\n  default: new Vector3(0, 0, 0),\r\n  copy: copyCopyable<Vector3>,\r\n  clone: cloneClonable<Vector3>,\r\n});\r\n\r\nexport const Vector3CustomEditor = (\r\n  value: Vector3,\r\n  onChange: (value: Vector3) => void\r\n): [HTMLDivElement, (v: Vector3) => void] => {\r\n  const vector3Div = document.createElement(\"div\");\r\n  vector3Div.style.display = \"flex\";\r\n  vector3Div.style.flexDirection = \"row\";\r\n\r\n  const xLabel = document.createElement(\"label\");\r\n  xLabel.innerText = \"X\";\r\n  vector3Div.appendChild(xLabel);\r\n  const xInput = document.createElement(\"input\");\r\n  xInput.type = \"number\";\r\n  xInput.style.minWidth = \"0px\";\r\n  xInput.style.flexGrow = \"1\";\r\n  xInput.value = value.value[0].toString();\r\n  vector3Div.appendChild(xInput);\r\n\r\n  const yLabel = document.createElement(\"label\");\r\n  yLabel.innerText = \"Y\";\r\n  vector3Div.appendChild(yLabel);\r\n  const yInput = document.createElement(\"input\");\r\n  yInput.type = \"number\";\r\n  yInput.style.minWidth = \"0px\";\r\n  yInput.style.flexGrow = \"1\";\r\n  yInput.value = value.value[1].toString();\r\n  vector3Div.appendChild(yInput);\r\n\r\n  const zLabel = document.createElement(\"label\");\r\n  zLabel.innerText = \"Z\";\r\n  vector3Div.appendChild(zLabel);\r\n  const zInput = document.createElement(\"input\");\r\n  zInput.type = \"number\";\r\n  zInput.style.minWidth = \"0px\";\r\n  zInput.style.flexGrow = \"1\";\r\n  zInput.value = value.value[2].toString();\r\n  vector3Div.appendChild(zInput);\r\n\r\n  const update = () => {\r\n    onChange(\r\n      new Vector3(\r\n        parseFloat(xInput.value),\r\n        parseFloat(yInput.value),\r\n        parseFloat(zInput.value)\r\n      )\r\n    );\r\n  };\r\n\r\n  const setVector3 = (v: Vector3) => {\r\n    if (\r\n      document.activeElement === xInput ||\r\n      document.activeElement === yInput ||\r\n      document.activeElement === zInput\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    xInput.value = v.value[0].toString();\r\n    yInput.value = v.value[1].toString();\r\n    zInput.value = v.value[2].toString();\r\n  };\r\n\r\n  xInput.addEventListener(\"change\", update);\r\n  yInput.addEventListener(\"change\", update);\r\n  zInput.addEventListener(\"change\", update);\r\n\r\n  return [vector3Div, setVector3];\r\n};\r\n", "import { Entity } from \"ecsy-wd\";\r\nimport { Attributes, System, SystemQueries } from \"ecsy-wd\";\r\nimport { mat3, vec2 } from \"gl-matrix\";\r\nimport fileDownload from \"js-file-download\";\r\nimport { IComponent } from \"../../Core/ComponentRegistry\";\r\nimport { TransformData2D } from \"../../Core/Locomotion/DataComponent/TransformData2D\";\r\nimport { Canvas2DRenderer } from \"../../Core/Render/System/Canvas2DRenderer\";\r\nimport { EntitySerializer } from \"../../Core/Serialization/EntitySerializer\";\r\nimport { Vector2 } from \"../../Mathematics/Vector2\";\r\nimport { editorUIContext } from \"../EditorContext\";\r\nimport { EditorSceneCamTag } from \"../TagComponent/EditorSceneCamTag\";\r\nimport { EditorSelectedTag } from \"../TagComponent/EditorSelectedTag\";\r\nimport { updateEntityInspector } from \"./EditorInspectorSystem\";\r\n\r\nconst highlightThreshold = 25;\r\nconst axisLength = 50;\r\n\r\n// TODO: Split all inspector operations into ECS based systems.\r\nexport class EditorViewPort2DSystem extends Canvas2DRenderer {\r\n  static inspectEntity: Entity | null = null;\r\n  static inspectTransform: Readonly<TransformData2D> | null = null;\r\n\r\n  static queries: SystemQueries = {\r\n    ...this.queries,\r\n    highlightEntity: {\r\n      components: [TransformData2D],\r\n    },\r\n  };\r\n\r\n  highlightEntity: Entity | null = null;\r\n\r\n  init(attributes?: Attributes | undefined): void {\r\n    super.init(attributes);\r\n\r\n    // Register mouse move event for main canvas.\r\n    this.mainCanvas.addEventListener(\"mousemove\", (event) => {\r\n      const mousePos = this.getMousePos(event);\r\n\r\n      // If left mouse button is pressed, move the entity.\r\n      if (event.buttons === 1) {\r\n        const mouseWorldPos = this.screenToWorld(mousePos);\r\n\r\n        if (EditorViewPort2DSystem.inspectEntity) {\r\n          const transform =\r\n            EditorViewPort2DSystem.inspectEntity.getMutableComponent(\r\n              TransformData2D\r\n            ) as TransformData2D;\r\n\r\n          transform.position = new Vector2(mouseWorldPos[0], mouseWorldPos[1]);\r\n\r\n          // Update the transform component.\r\n          EditorViewPort2DSystem.inspectEntity.getMutableComponent(\r\n            TransformData2D\r\n          );\r\n        }\r\n      } else {\r\n        // Pick the closest entity and highlight it.\r\n        let closestEntity: Entity | null = null;\r\n        let closestDistance = Number.MAX_VALUE;\r\n\r\n        // Find the closest entity.\r\n        this.queries.highlightEntity.results.forEach((entity) => {\r\n          const transform = entity.getComponent(\r\n            TransformData2D\r\n          ) as TransformData2D;\r\n          const distance = vec2.distance(\r\n            mousePos,\r\n            this.worldToScreen(transform.position.value)\r\n          );\r\n\r\n          if (\r\n            distance < highlightThreshold &&\r\n            distance < closestDistance &&\r\n            !entity.hasComponent(EditorSceneCamTag)\r\n          ) {\r\n            closestEntity = entity;\r\n            closestDistance = distance;\r\n          }\r\n        });\r\n\r\n        // Set the highlight entity.\r\n        this.highlightEntity = closestEntity;\r\n      }\r\n    });\r\n\r\n    // Register left mouse down.\r\n    this.mainCanvas.addEventListener(\"mousedown\", (event) => {\r\n      if (event.button === 0) {\r\n        if (this.highlightEntity) {\r\n          // Select the entity.\r\n          updateEntityInspector(this.highlightEntity);\r\n        } else {\r\n          // Clear the entity inspector.\r\n          updateEntityInspector(null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  execute(delta: number, time: number): void {\r\n    try {\r\n      super.execute(delta, time);\r\n    } catch (error) {\r\n      console.warn(error);\r\n      return;\r\n    }\r\n\r\n    // Draw transform and enable selection here.\r\n\r\n    // Get the camera transform.\r\n    const cameraTransform = this.queries.mainCamera.results[0].getComponent(\r\n      TransformData2D\r\n    ) as TransformData2D;\r\n    // Get the canvas size.\r\n    const canvasSize = vec2.fromValues(\r\n      this.mainCanvas.width,\r\n      this.mainCanvas.height\r\n    );\r\n\r\n    // Construct world to camera matrix.\r\n    const worldToCamera = mat3.create();\r\n    mat3.multiply(\r\n      worldToCamera,\r\n      worldToCamera,\r\n      this.worldToCamera(cameraTransform, canvasSize)\r\n    );\r\n\r\n    // Draw selected entity.\r\n    if (EditorViewPort2DSystem.inspectTransform) {\r\n      // Construct object to camera matrix.\r\n      const inspectObjToCamera = mat3.create();\r\n      mat3.multiply(\r\n        inspectObjToCamera,\r\n        worldToCamera,\r\n        this.objectToWorld(EditorViewPort2DSystem.inspectTransform)\r\n      );\r\n\r\n      this.drawAxis(inspectObjToCamera);\r\n    }\r\n\r\n    // Draw highlight.\r\n    if (this.highlightEntity) {\r\n      const transform = this.highlightEntity.getComponent(\r\n        TransformData2D\r\n      ) as TransformData2D;\r\n\r\n      const highlightObjToCamera = mat3.create();\r\n      mat3.multiply(\r\n        highlightObjToCamera,\r\n        worldToCamera,\r\n        this.objectToWorld(transform)\r\n      );\r\n\r\n      this.drawHighlight(highlightObjToCamera);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the mouse position in screen space.\r\n   *\r\n   * @param event canvas mouse event.\r\n   * @returns mouse position in screen space.\r\n   */\r\n  getMousePos(event: MouseEvent): vec2 {\r\n    const rect = this.mainCanvas.getBoundingClientRect();\r\n    return vec2.fromValues(event.clientX - rect.left, event.clientY - rect.top);\r\n  }\r\n\r\n  /**\r\n   * Convert screen space to world space.\r\n   *\r\n   * @param screenPos screen position.\r\n   * @returns world position.\r\n   */\r\n  screenToWorld(screenPos: vec2): vec2 {\r\n    // Check if main camera exists.\r\n    if (this.queries.mainCamera.results.length === 0) {\r\n      throw new Error(\"Main camera not found.\");\r\n    }\r\n    // Check if there's more than one main camera.\r\n    else if (this.queries.mainCamera.results.length > 1) {\r\n      throw new Error(\"More than one main camera found.\");\r\n    }\r\n\r\n    const cameraTransform = this.queries.mainCamera.results[0].getComponent(\r\n      TransformData2D\r\n    ) as TransformData2D;\r\n    const canvasSize = vec2.fromValues(\r\n      this.mainCanvas.width,\r\n      this.mainCanvas.height\r\n    );\r\n\r\n    const worldPos = vec2.create();\r\n    vec2.transformMat3(\r\n      worldPos,\r\n      screenPos,\r\n      mat3.invert(\r\n        mat3.create(),\r\n        this.worldToCamera(cameraTransform, canvasSize)\r\n      )\r\n    );\r\n\r\n    return worldPos;\r\n  }\r\n\r\n  /**\r\n   * Convert world space to screen space.\r\n   *\r\n   * @param worldPos world position.\r\n   * @returns screen position.\r\n   */\r\n  worldToScreen(worldPos: vec2): vec2 {\r\n    // Check if main camera exists.\r\n    if (this.queries.mainCamera.results.length === 0) {\r\n      throw new Error(\"Main camera not found.\");\r\n    }\r\n    // Check if there's more than one main camera.\r\n    else if (this.queries.mainCamera.results.length > 1) {\r\n      throw new Error(\"More than one main camera found.\");\r\n    }\r\n\r\n    const cameraTransform = this.queries.mainCamera.results[0].getComponent(\r\n      TransformData2D\r\n    ) as TransformData2D;\r\n    const canvasSize = vec2.fromValues(\r\n      this.mainCanvas.width,\r\n      this.mainCanvas.height\r\n    );\r\n\r\n    const screenPos = vec2.create();\r\n    vec2.transformMat3(\r\n      screenPos,\r\n      worldPos,\r\n      this.worldToCamera(cameraTransform, canvasSize)\r\n    );\r\n\r\n    return screenPos;\r\n  }\r\n\r\n  drawAxis(inspectObjToCamera: mat3): void {\r\n    // Get the starting position.\r\n    const startPos = vec2.fromValues(0, 0);\r\n    vec2.transformMat3(startPos, startPos, inspectObjToCamera);\r\n    // Get the x axis position.\r\n    const xAxisPos = vec2.fromValues(1, 0);\r\n    vec2.transformMat3(xAxisPos, xAxisPos, inspectObjToCamera);\r\n    // Get the y axis position.\r\n    const yAxisPos = vec2.fromValues(0, 1);\r\n    vec2.transformMat3(yAxisPos, yAxisPos, inspectObjToCamera);\r\n\r\n    // Normalize the axis: xEnd = xStart + normalize(xAxis - xStart)\r\n    vec2.add(\r\n      xAxisPos,\r\n      startPos,\r\n      vec2.scale(\r\n        vec2.create(),\r\n        vec2.normalize(\r\n          vec2.create(),\r\n          vec2.sub(vec2.create(), xAxisPos, startPos)\r\n        ),\r\n        axisLength\r\n      )\r\n    );\r\n\r\n    // Normalize the axis: yEnd = yStart + normalize(yAxis - yStart)\r\n    vec2.add(\r\n      yAxisPos,\r\n      startPos,\r\n      vec2.scale(\r\n        vec2.create(),\r\n        vec2.normalize(\r\n          vec2.create(),\r\n          vec2.sub(vec2.create(), yAxisPos, startPos)\r\n        ),\r\n        axisLength\r\n      )\r\n    );\r\n\r\n    // Draw the x axis.\r\n    this.canvasContext.strokeStyle = \"red\";\r\n    this.canvasContext.beginPath();\r\n    this.canvasContext.lineWidth = 2;\r\n    this.canvasContext.moveTo(startPos[0], startPos[1]);\r\n    this.canvasContext.lineTo(xAxisPos[0], xAxisPos[1]);\r\n    this.canvasContext.stroke();\r\n\r\n    // Draw the y axis.\r\n    this.canvasContext.strokeStyle = \"blue\";\r\n    this.canvasContext.beginPath();\r\n    this.canvasContext.lineWidth = 2;\r\n    this.canvasContext.moveTo(startPos[0], startPos[1]);\r\n    this.canvasContext.lineTo(yAxisPos[0], yAxisPos[1]);\r\n    this.canvasContext.stroke();\r\n  }\r\n\r\n  drawHighlight(highlightObjToCamera: mat3): void {\r\n    // Get the highlight position.\r\n    const startPos = vec2.fromValues(0, 0);\r\n    vec2.transformMat3(startPos, startPos, highlightObjToCamera);\r\n\r\n    this.canvasContext.beginPath();\r\n    this.canvasContext.strokeStyle = \"blue\";\r\n    this.canvasContext.lineWidth = 2;\r\n    this.canvasContext.arc(\r\n      startPos[0],\r\n      startPos[1],\r\n      highlightThreshold,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    this.canvasContext.stroke();\r\n  }\r\n}\r\n", "import { Attributes, System, SystemQueries } from \"ecsy-wd\";\r\nimport { mat3, vec2 } from \"gl-matrix\";\r\nimport { TransformData2D } from \"../../Locomotion/DataComponent/TransformData2D\";\r\nimport { CameraData2D } from \"../DataComponent/CameraData2D\";\r\nimport { MainCameraTag } from \"../TagComponent/MainCameraTag\";\r\n\r\n/**\r\n * Base class for canvas renderers.\r\n */\r\nexport class Canvas2DRenderer extends System {\r\n  static queries: SystemQueries = {\r\n    mainCamera: {\r\n      components: [MainCameraTag, CameraData2D, TransformData2D],\r\n    },\r\n  };\r\n\r\n  mainCanvas!: HTMLCanvasElement;\r\n  canvasContext!: CanvasRenderingContext2D;\r\n\r\n  init(attributes?: Attributes | undefined): void {\r\n    this.mainCanvas = attributes?.mainCanvas;\r\n    this.canvasContext = this.mainCanvas.getContext(\r\n      \"2d\"\r\n    ) as CanvasRenderingContext2D;\r\n  }\r\n\r\n  execute(delta: number, time: number): void {\r\n    // Check if main camera exists.\r\n    if (this.queries.mainCamera.results.length === 0) {\r\n      throw new Error(\"Main camera not found.\");\r\n    }\r\n    // Check if there's more than one main camera.\r\n    else if (this.queries.mainCamera.results.length > 1) {\r\n      throw new Error(\"More than one main camera found.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct a transform matrix from world position to camera space.\r\n   *\r\n   * @param camTransform The transform of the camera.\r\n   * @param canvasSize the size of the canvas in vector2.\r\n   */\r\n  worldToCamera(camTransform: TransformData2D, canvasSize: vec2): mat3 {\r\n    // Construct world to camera matrix.\r\n    const worldToCamera = mat3.create();\r\n    // Center the camera.\r\n    mat3.fromTranslation(\r\n      worldToCamera,\r\n      vec2.fromValues(canvasSize[0] / 2, canvasSize[1] / 2)\r\n    );\r\n    mat3.scale(worldToCamera, worldToCamera, camTransform.scale.value);\r\n    mat3.translate(\r\n      worldToCamera,\r\n      worldToCamera,\r\n      vec2.negate(vec2.create(), camTransform.position.value)\r\n    );\r\n    mat3.rotate(worldToCamera, worldToCamera, camTransform.rotation);\r\n\r\n    return worldToCamera;\r\n  }\r\n\r\n  /**\r\n   * Construct a transform matrix from object space to world space.\r\n   *\r\n   * @param objTransform\r\n   */\r\n  objectToWorld(objTransform: TransformData2D): mat3 {\r\n    // TODO: Convert local transform to world transform.\r\n    // Construct entity to world matrix.\r\n    const objectToWorld = mat3.create();\r\n    mat3.fromTranslation(objectToWorld, objTransform.position.value);\r\n    mat3.rotate(objectToWorld, objectToWorld, objTransform.rotation);\r\n    mat3.scale(objectToWorld, objectToWorld, objTransform.scale.value);\r\n\r\n    return objectToWorld;\r\n  }\r\n}\r\n", "import { Component, ComponentSchema } from \"ecsy-wd\";\r\nimport { Types } from \"ecsy-wd\";\r\nimport { IComponent } from \"../../ComponentRegistry\";\r\n\r\nexport enum BackgroundType {\r\n  Color = 0,\r\n  Texture = 1,\r\n}\r\n\r\n@IComponent.register\r\nexport class CameraData2D extends Component<CameraData2D> {\r\n  static schema: ComponentSchema = {\r\n    backgroundType: {\r\n      type: Types.Number,\r\n      default: BackgroundType.Color,\r\n    },\r\n    backgroundColor: {\r\n      type: Types.String,\r\n      default: \"#000000\",\r\n    },\r\n    backgroundTexture: {\r\n      type: Types.String,\r\n      default: \"\",\r\n    },\r\n  };\r\n\r\n  backgroundType!: BackgroundType;\r\n\r\n  backgroundColor!: string;\r\n  backgroundTexture!: string;\r\n}\r\n", "import { TagComponent } from \"ecsy-wd\";\r\nimport { IComponent } from \"../../ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class MainCameraTag extends TagComponent {}\r\n", "import { Entity } from \"ecsy-wd\";\r\nimport { Attributes, System } from \"ecsy-wd\";\r\nimport { mat4, vec2, vec3 } from \"gl-matrix\";\r\nimport { TransformData3D } from \"../../Core/Locomotion/DataComponent/TransformData3D\";\r\nimport { Canvas3DRenderer } from \"../../Core/Render/System/Canvas3DRenderer\";\r\nimport { EditorControl, editorControlContext } from \"../EditorContext\";\r\nimport { EditorSceneCamTag } from \"../TagComponent/EditorSceneCamTag\";\r\n\r\nconst moveControlThreshold = 30;\r\n\r\nexport class EditorViewPort3DSystem extends Canvas3DRenderer {\r\n  static inspectEntity: Entity | null = null;\r\n  static inspectTransform: TransformData3D | null = null;\r\n\r\n  mousePosition: vec2 = vec2.create();\r\n  mouseDelta: vec2 = vec2.create();\r\n  mouseInCanvas: boolean = true;\r\n\r\n  highlightAxis: string | null = null;\r\n  movingAxis: string | null = null;\r\n\r\n  init(attributes?: Attributes | undefined): void {\r\n    super.init(attributes);\r\n\r\n    // Update mouse position.\r\n    this.mainCanvas.addEventListener(\"mousemove\", (event) => {\r\n      this.mousePosition = this.getMousePos(event);\r\n      vec2.add(\r\n        this.mouseDelta,\r\n        this.mouseDelta,\r\n        vec2.fromValues(event.movementX, event.movementY)\r\n      );\r\n    });\r\n\r\n    // Update mouse in canvas.\r\n    this.mainCanvas.addEventListener(\"mouseenter\", () => {\r\n      this.mouseInCanvas = true;\r\n    });\r\n    this.mainCanvas.addEventListener(\"mouseleave\", () => {\r\n      this.mouseInCanvas = false;\r\n    });\r\n\r\n    // Update mouse left click.\r\n    this.mainCanvas.addEventListener(\"mousedown\", (event) => {\r\n      if (event.button == 0) {\r\n        if (this.highlightAxis) {\r\n          this.movingAxis = this.highlightAxis;\r\n        }\r\n      }\r\n    });\r\n    this.mainCanvas.addEventListener(\"mouseup\", (event) => {\r\n      if (event.button == 0) {\r\n        this.movingAxis = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  execute(delta: number, time: number): void {\r\n    try {\r\n      super.execute(delta, time);\r\n    } catch (error) {\r\n      console.warn(error);\r\n      return;\r\n    }\r\n\r\n    // Generate world to camera matrix.\r\n    this.generateWorldToCameraMatrix();\r\n    // Generate camera to screen matrix.\r\n    this.generateCameraToScreenMatrix();\r\n\r\n    // Draw selected entity.\r\n    if (\r\n      editorControlContext.controlMode == EditorControl.Move &&\r\n      EditorViewPort3DSystem.inspectTransform &&\r\n      !EditorViewPort3DSystem.inspectEntity?.hasComponent(EditorSceneCamTag)\r\n    ) {\r\n      // Generate object to world matrix.\r\n      const objectToWorld = this.objectToWorld(\r\n        EditorViewPort3DSystem.inspectTransform,\r\n        true\r\n      );\r\n\r\n      // Generate object to screen matrix.\r\n      const objectToScreen = mat4.create();\r\n      mat4.multiply(objectToScreen, this.worldToCamera, objectToWorld);\r\n      mat4.multiply(objectToScreen, this.cameraToScreen, objectToScreen);\r\n\r\n      // Draw the axis.\r\n      this.drawAxis(objectToScreen);\r\n\r\n      // Move the object.\r\n      const startPoint = vec3.create();\r\n      vec3.transformMat4(startPoint, [0, 0, 0], objectToScreen);\r\n      // Get the end points of the axis.\r\n      const endPointX = vec3.create();\r\n      vec3.transformMat4(endPointX, [1, 0, 0], objectToScreen);\r\n      const endPointY = vec3.create();\r\n      vec3.transformMat4(endPointY, [0, 1, 0], objectToScreen);\r\n      const endPointZ = vec3.create();\r\n      vec3.transformMat4(endPointZ, [0, 0, 1], objectToScreen);\r\n      // If the mouse is in the canvas.\r\n      if (this.mouseInCanvas) {\r\n        // Get the closest axis.\r\n        const xDistance = vec2.distance(\r\n          this.mousePosition,\r\n          vec2.fromValues(endPointX[0], endPointX[1])\r\n        );\r\n        const yDistance = vec2.distance(\r\n          this.mousePosition,\r\n          vec2.fromValues(endPointY[0], endPointY[1])\r\n        );\r\n        const zDistance = vec2.distance(\r\n          this.mousePosition,\r\n          vec2.fromValues(endPointZ[0], endPointZ[1])\r\n        );\r\n\r\n        const minDistance = Math.min(xDistance, yDistance, zDistance);\r\n\r\n        // If the mouse is close enough to the axis.\r\n        if (minDistance < moveControlThreshold) {\r\n          // Move the object.\r\n          if (minDistance == xDistance) {\r\n            // Highlight the axis.\r\n            this.canvasContext.strokeStyle = \"red\";\r\n            this.canvasContext.beginPath();\r\n            this.canvasContext.arc(\r\n              endPointX[0],\r\n              endPointX[1],\r\n              moveControlThreshold,\r\n              0,\r\n              2 * Math.PI\r\n            );\r\n            this.canvasContext.stroke();\r\n\r\n            this.highlightAxis = \"x\";\r\n          } else if (minDistance == yDistance) {\r\n            // Highlight the axis.\r\n            this.canvasContext.strokeStyle = \"green\";\r\n            this.canvasContext.beginPath();\r\n            this.canvasContext.arc(\r\n              endPointY[0],\r\n              endPointY[1],\r\n              moveControlThreshold,\r\n              0,\r\n              2 * Math.PI\r\n            );\r\n            this.canvasContext.stroke();\r\n\r\n            this.highlightAxis = \"y\";\r\n          } else if (minDistance == zDistance) {\r\n            // Highlight the axis.\r\n            this.canvasContext.strokeStyle = \"blue\";\r\n            this.canvasContext.beginPath();\r\n            this.canvasContext.arc(\r\n              endPointZ[0],\r\n              endPointZ[1],\r\n              moveControlThreshold,\r\n              0,\r\n              2 * Math.PI\r\n            );\r\n            this.canvasContext.stroke();\r\n\r\n            this.highlightAxis = \"z\";\r\n          }\r\n        } else {\r\n          this.highlightAxis = null;\r\n        }\r\n\r\n        // Move the object.\r\n        if (this.movingAxis) {\r\n          switch (this.movingAxis) {\r\n            case \"x\":\r\n              this.moveAxis(endPointX, startPoint, 0);\r\n              break;\r\n\r\n            case \"y\":\r\n              this.moveAxis(endPointY, startPoint, 1);\r\n              break;\r\n\r\n            case \"z\":\r\n              this.moveAxis(endPointZ, startPoint, 2);\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset mouse delta.\r\n    vec2.set(this.mouseDelta, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * Move the object along the axis.\r\n   * @param axisEndPoint the end point of the axis.\r\n   * @param startPoint the start point of the axis.\r\n   */\r\n  private moveAxis(axisEndPoint: vec3, startPoint: vec3, axisIndex: number) {\r\n    const axisDir = vec2.create();\r\n    vec2.sub(\r\n      axisDir,\r\n      vec2.fromValues(axisEndPoint[0], axisEndPoint[1]),\r\n      vec2.fromValues(startPoint[0], startPoint[1])\r\n    );\r\n    // Get the mouse move magnitude on the axis.\r\n    let axisMove = vec2.dot(\r\n      axisDir,\r\n      vec2.fromValues(this.mouseDelta[0], this.mouseDelta[1])\r\n    );\r\n    axisMove = axisMove / Math.pow(vec2.length(axisDir), 2);\r\n\r\n    // Move the object.\r\n    if (EditorViewPort3DSystem.inspectTransform) {\r\n      EditorViewPort3DSystem.inspectTransform.position.value[axisIndex] +=\r\n        axisMove;\r\n\r\n      // Update the transform.\r\n      EditorViewPort3DSystem.inspectEntity?.getMutableComponent(\r\n        TransformData3D\r\n      );\r\n    }\r\n  }\r\n\r\n  drawAxis(objectToScreen: mat4): void {\r\n    // Generate screen space start point.\r\n    const startPoint = vec3.create();\r\n    vec3.transformMat4(startPoint, [0, 0, 0], objectToScreen);\r\n\r\n    // Generate screen space end point.\r\n    const endPointX = vec3.create();\r\n    vec3.transformMat4(endPointX, [1, 0, 0], objectToScreen);\r\n    const endPointY = vec3.create();\r\n    vec3.transformMat4(endPointY, [0, 1, 0], objectToScreen);\r\n    const endPointZ = vec3.create();\r\n    vec3.transformMat4(endPointZ, [0, 0, 1], objectToScreen);\r\n\r\n    // Draw the line.\r\n    this.drawLine(startPoint, endPointX, \"red\", 1);\r\n    this.drawLine(startPoint, endPointY, \"green\", 1);\r\n    this.drawLine(startPoint, endPointZ, \"blue\", 1);\r\n  }\r\n\r\n  /**\r\n   * Get the mouse position in screen space.\r\n   *\r\n   * @param event canvas mouse event.\r\n   * @returns mouse position in screen space.\r\n   */\r\n  getMousePos(event: MouseEvent): vec2 {\r\n    const rect = this.mainCanvas.getBoundingClientRect();\r\n    return vec2.fromValues(event.clientX - rect.left, event.clientY - rect.top);\r\n  }\r\n}\r\n", "import { Attributes, System, SystemQueries } from \"ecsy-wd\";\r\nimport { mat4, vec2, vec3 } from \"gl-matrix\";\r\nimport { TransformData3D } from \"../../Locomotion/DataComponent/TransformData3D\";\r\nimport { OrthographicCameraData3D } from \"../DataComponent/OrthographicCameraData3D\";\r\nimport { PerspectiveCameraData3D } from \"../DataComponent/PerspectiveCameraData3D\";\r\nimport { MainCameraTag } from \"../TagComponent/MainCameraTag\";\r\n\r\nexport class Canvas3DRenderer extends System {\r\n  static queries: SystemQueries = {\r\n    perspectiveMainCamera: {\r\n      components: [MainCameraTag, PerspectiveCameraData3D, TransformData3D],\r\n    },\r\n    orthographicMainCamera: {\r\n      components: [MainCameraTag, OrthographicCameraData3D, TransformData3D],\r\n    },\r\n  };\r\n\r\n  mainCanvas!: HTMLCanvasElement;\r\n  canvasContext!: CanvasRenderingContext2D;\r\n\r\n  worldToCamera: mat4 = mat4.create();\r\n  cameraToScreen: mat4 = mat4.create();\r\n\r\n  init(attributes?: Attributes | undefined): void {\r\n    this.mainCanvas = attributes?.mainCanvas;\r\n    this.canvasContext = this.mainCanvas.getContext(\r\n      \"2d\"\r\n    ) as CanvasRenderingContext2D;\r\n  }\r\n\r\n  execute(delta: number, time: number): void {\r\n    // Check if main camera exists.\r\n    if (\r\n      this.queries.perspectiveMainCamera.results.length +\r\n        this.queries.orthographicMainCamera.results.length ===\r\n      0\r\n    ) {\r\n      throw new Error(\"Main camera not found.\");\r\n    }\r\n    // Check if there's more than one main camera.\r\n    else if (\r\n      this.queries.perspectiveMainCamera.results.length +\r\n        this.queries.orthographicMainCamera.results.length >\r\n      1\r\n    ) {\r\n      throw new Error(\"More than one main camera found.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct a transform matrix from world space to model space.\r\n   * @param camTransform the transform of the camera.\r\n   * @param camData the camera data.\r\n   * @returns the world to model matrix.\r\n   */\r\n  orthographicWorldToCamera(\r\n    camTransform: TransformData3D,\r\n    camData: OrthographicCameraData3D\r\n  ): mat4 {\r\n    // Construct world to camera matrix.\r\n    const worldToCamera = mat4.create();\r\n    mat4.invert(worldToCamera, this.objectToWorld(camTransform));\r\n    const orthographic = mat4.create();\r\n    mat4.ortho(\r\n      orthographic,\r\n      camData.left,\r\n      camData.right,\r\n      camData.bottom,\r\n      camData.top,\r\n      camData.near,\r\n      camData.far\r\n    );\r\n    mat4.multiply(worldToCamera, orthographic, worldToCamera);\r\n    return worldToCamera;\r\n  }\r\n\r\n  /**\r\n   * Construct a transform matrix from world space to camera space.\r\n   *\r\n   * @param camTransform the transform of the camera.\r\n   * @param camData the camera data.\r\n   * @returns the world to camera matrix.\r\n   */\r\n  perspectiveWorldToCamera(\r\n    camTransform: TransformData3D,\r\n    camData: PerspectiveCameraData3D\r\n  ): mat4 {\r\n    // Construct world to camera matrix.\r\n    const worldToCamera = mat4.create();\r\n    mat4.invert(worldToCamera, this.objectToWorld(camTransform));\r\n    const perspective = mat4.create();\r\n    mat4.perspective(\r\n      perspective,\r\n      camData.fov,\r\n      camData.aspect,\r\n      camData.near,\r\n      camData.far\r\n    );\r\n    mat4.multiply(worldToCamera, perspective, worldToCamera);\r\n    return worldToCamera;\r\n  }\r\n\r\n  /**\r\n   * Construct a transform matrix from model space to world space.\r\n   *\r\n   * @param transform the transform of the model.\r\n   * @returns the model to world matrix.\r\n   */\r\n  objectToWorld(transform: TransformData3D, dropScale: boolean = false): mat4 {\r\n    const objectToWorld = mat4.create();\r\n    if (dropScale) {\r\n      mat4.fromRotationTranslation(\r\n        objectToWorld,\r\n        transform.rotation.value,\r\n        transform.position.value\r\n      );\r\n    } else {\r\n      mat4.fromRotationTranslationScale(\r\n        objectToWorld,\r\n        transform.rotation.value,\r\n        transform.position.value,\r\n        transform.scale.value\r\n      );\r\n    }\r\n    return objectToWorld;\r\n  }\r\n\r\n  generateCameraToScreenMatrix() {\r\n    this.cameraToScreen = mat4.create();\r\n\r\n    mat4.fromTranslation(this.cameraToScreen, [\r\n      this.mainCanvas.width / 2,\r\n      this.mainCanvas.height / 2,\r\n      0,\r\n    ]);\r\n\r\n    mat4.scale(this.cameraToScreen, this.cameraToScreen, [\r\n      this.mainCanvas.width,\r\n      this.mainCanvas.height,\r\n      1,\r\n    ]);\r\n  }\r\n\r\n  generateWorldToCameraMatrix() {\r\n    // Get the canvas size.\r\n    const canvasSize = vec2.fromValues(\r\n      this.mainCanvas.width,\r\n      this.mainCanvas.height\r\n    );\r\n    // Get world to screen space matrix.\r\n    if (this.queries.perspectiveMainCamera.results.length > 0) {\r\n      // Perspective camera.\r\n      const camera = this.queries.perspectiveMainCamera.results[0];\r\n      const cameraTransform = camera.getComponent(\r\n        TransformData3D\r\n      ) as TransformData3D;\r\n      const cameraPerspective = camera.getMutableComponent(\r\n        PerspectiveCameraData3D\r\n      ) as PerspectiveCameraData3D;\r\n\r\n      // Change the aspect ratio.\r\n      cameraPerspective.aspect = canvasSize[0] / canvasSize[1];\r\n\r\n      this.worldToCamera = this.perspectiveWorldToCamera(\r\n        cameraTransform,\r\n        cameraPerspective\r\n      );\r\n    } else {\r\n      // TODO: Orthographic camera.\r\n    }\r\n  }\r\n\r\n  drawLine(\r\n    startPoint: vec3,\r\n    endPoint: vec3,\r\n    color: string,\r\n    lineWidth: number\r\n  ): void {\r\n    if (startPoint[2] > 1 && endPoint[2] > 1) {\r\n      this.canvasContext.strokeStyle = color;\r\n      this.canvasContext.lineWidth = lineWidth;\r\n      this.canvasContext.beginPath();\r\n      this.canvasContext.moveTo(startPoint[0], startPoint[1]);\r\n      this.canvasContext.lineTo(endPoint[0], endPoint[1]);\r\n      this.canvasContext.stroke();\r\n    }\r\n  }\r\n}\r\n", "import { Component, ComponentSchema } from \"ecsy-wd\";\r\nimport { Types } from \"ecsy-wd\";\r\nimport { IComponent } from \"../../ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class OrthographicCameraData3D extends Component<OrthographicCameraData3D> {\r\n  static schema: ComponentSchema = {\r\n    left: {\r\n      type: Types.Number,\r\n      default: -1,\r\n    },\r\n    right: {\r\n      type: Types.Number,\r\n      default: 1,\r\n    },\r\n    top: {\r\n      type: Types.Number,\r\n      default: 1,\r\n    },\r\n    bottom: {\r\n      type: Types.Number,\r\n      default: -1,\r\n    },\r\n    near: {\r\n      type: Types.Number,\r\n      default: 0.1,\r\n    },\r\n    far: {\r\n      type: Types.Number,\r\n      default: 1000,\r\n    },\r\n  };\r\n\r\n  // Camera left plane distance.\r\n  left!: number;\r\n  // Camera right plane distance.\r\n  right!: number;\r\n  // Camera top plane distance.\r\n  top!: number;\r\n  // Camera bottom plane distance.\r\n  bottom!: number;\r\n  // Camera near plane distance.\r\n  near!: number;\r\n  // Camera far plane distance.\r\n  far!: number;\r\n}\r\n", "import { Component, ComponentSchema, COMPONENT_CHANGE_EVENT } from \"ecsy-wd\";\r\nimport { Types } from \"ecsy-wd\";\r\nimport { IComponent } from \"../../ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class PerspectiveCameraData3D extends Component<PerspectiveCameraData3D> {\r\n  static schema: ComponentSchema = {\r\n    fov: {\r\n      type: Types.Number,\r\n      default: Math.PI / 4,\r\n    },\r\n    aspect: {\r\n      type: Types.Number,\r\n      default: 1,\r\n    },\r\n    near: {\r\n      type: Types.Number,\r\n      default: 0.1,\r\n    },\r\n    far: {\r\n      type: Types.Number,\r\n      default: 1000,\r\n    },\r\n  };\r\n\r\n  // y field of view in radians.\r\n  fov!: number;\r\n  // Camera aspect ratio.\r\n  aspect!: number;\r\n  // Camera near plane distance.\r\n  near!: number;\r\n  // Camera far plane distance.\r\n  far!: number;\r\n\r\n  public useDefaultInspector: boolean = false;\r\n  public onInspector: (componentDiv: HTMLDivElement) => void | null = (\r\n    componentDiv: HTMLDivElement\r\n  ) => {\r\n    const fovDiv = document.createElement(\"div\");\r\n    fovDiv.style.display = \"flex\";\r\n    fovDiv.style.flexDirection = \"row\";\r\n\r\n    fovDiv.appendChild(document.createTextNode(\"fov: \"));\r\n    // FOV Slider.\r\n    const fovSlider = document.createElement(\"input\");\r\n    fovSlider.type = \"range\";\r\n    fovSlider.min = \"0\";\r\n    fovSlider.max = \"3.14\";\r\n    fovSlider.step = \"0.01\";\r\n    fovSlider.value = this.fov.toString();\r\n    fovSlider.style.flex = \"1\";\r\n    fovSlider.addEventListener(\"change\", (event) => {\r\n      this.fov = parseFloat(fovSlider.value);\r\n      this.eventEmitter.emit(COMPONENT_CHANGE_EVENT, this);\r\n    });\r\n    this.eventEmitter.on(COMPONENT_CHANGE_EVENT, () => {\r\n      // If the input is focused, don't update it.\r\n      if (document.activeElement !== fovSlider) {\r\n        fovSlider.value = this.fov.toString();\r\n      }\r\n    });\r\n    fovDiv.appendChild(fovSlider);\r\n\r\n    const aspectDiv = document.createElement(\"div\");\r\n    aspectDiv.style.display = \"flex\";\r\n    aspectDiv.style.flexDirection = \"row\";\r\n\r\n    aspectDiv.appendChild(document.createTextNode(\"aspect: \"));\r\n    const aspectInput = document.createElement(\"input\");\r\n    aspectInput.type = \"number\";\r\n    aspectInput.value = this.aspect.toString();\r\n    aspectInput.style.minWidth = \"0px\";\r\n    aspectInput.style.flex = \"1\";\r\n    aspectInput.addEventListener(\"change\", (event) => {\r\n      this.aspect = parseFloat(aspectInput.value);\r\n      this.eventEmitter.emit(COMPONENT_CHANGE_EVENT, this);\r\n    });\r\n    this.eventEmitter.on(COMPONENT_CHANGE_EVENT, () => {\r\n      // If the input is focused, don't update it.\r\n      if (document.activeElement !== aspectInput) {\r\n        aspectInput.value = this.aspect.toString();\r\n      }\r\n    });\r\n    aspectDiv.appendChild(aspectInput);\r\n\r\n    const nearDiv = document.createElement(\"div\");\r\n    nearDiv.style.display = \"flex\";\r\n    nearDiv.style.flexDirection = \"row\";\r\n\r\n    nearDiv.appendChild(document.createTextNode(\"near: \"));\r\n    const nearInput = document.createElement(\"input\");\r\n    nearInput.type = \"number\";\r\n    nearInput.value = this.near.toString();\r\n    nearInput.style.minWidth = \"0px\";\r\n    nearInput.style.flex = \"1\";\r\n    nearInput.addEventListener(\"change\", (event) => {\r\n      this.near = parseFloat(nearInput.value);\r\n      this.eventEmitter.emit(COMPONENT_CHANGE_EVENT, this);\r\n    });\r\n    this.eventEmitter.on(COMPONENT_CHANGE_EVENT, () => {\r\n      // If the input is focused, don't update it.\r\n      if (document.activeElement !== nearInput) {\r\n        nearInput.value = this.near.toString();\r\n      }\r\n    });\r\n    nearDiv.appendChild(nearInput);\r\n\r\n    const farDiv = document.createElement(\"div\");\r\n    farDiv.style.display = \"flex\";\r\n    farDiv.style.flexDirection = \"row\";\r\n\r\n    farDiv.appendChild(document.createTextNode(\"far: \"));\r\n    const farInput = document.createElement(\"input\");\r\n    farInput.type = \"number\";\r\n    farInput.value = this.far.toString();\r\n    farInput.style.minWidth = \"0px\";\r\n    farInput.style.flex = \"1\";\r\n    farInput.addEventListener(\"change\", (event) => {\r\n      this.far = parseFloat(farInput.value);\r\n      this.eventEmitter.emit(COMPONENT_CHANGE_EVENT, this);\r\n    });\r\n    this.eventEmitter.on(COMPONENT_CHANGE_EVENT, () => {\r\n      // If the input is focused, don't update it.\r\n      if (document.activeElement !== farInput) {\r\n        farInput.value = this.far.toString();\r\n      }\r\n    });\r\n    farDiv.appendChild(farInput);\r\n\r\n    componentDiv.appendChild(fovDiv);\r\n    componentDiv.appendChild(aspectDiv);\r\n    componentDiv.appendChild(nearDiv);\r\n    componentDiv.appendChild(farDiv);\r\n  };\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_js_file_download", "IComponent", "import_ecsy_wd", "import_ecsy_wd", "component", "import_ecsy_wd", "import_ecsy_wd", "import_ecsy_wd", "import_ecsy_wd", "import_ecsy_wd", "import_ecsy_wd", "import_gl_matrix", "import_ecsy_wd", "import_gl_matrix", "import_gl_matrix", "import_ecsy_wd", "import_gl_matrix", "import_ecsy_wd", "import_ecsy_wd", "import_gl_matrix", "import_ecsy_wd", "import_gl_matrix", "import_ecsy_wd", "import_ecsy_wd", "component", "componentObject", "fileDownload", "addComponentButton", "componentList", "_a", "e", "fileDownload"]
}
